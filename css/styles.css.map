{"version":3,"sources":["_layout.scss","_tabs.scss","_sprite.scss","styles.scss"],"names":[],"mappings":"AAAA;EACE,iBAAgB;EAChB,eAAc,EACf;;ACHD;EACE,gBAAe;EACf,4BAA2B,EA0D5B;EAzDC;IACE,4DAA2D,EAC5D;EACD;IAEE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,UAAS;IACT,WAAU;IACV,iBAAgB,EACjB;EACD;IAEE,6BAAe;QAAf,gBAAe;IACf,+BAAsB;YAAtB,uBAAsB;IACtB,gBAAe;IACf,aAAY;IACZ,aAAY;IACZ,sBAAqB;IACrB,mBAAkB;IAClB,gBAAe,EAyBhB;IAxBC;MAEE,kBAAiB,EAClB;IACD;MAEE,WAAU;MACV,mBAAkB,EAgBnB;MAnBD;QAMI,eAAc,EACf;MACD;QACE,YAAW,EACZ;MAVH;QAYI,YAAW;QACX,mBAAkB;QAClB,UAAS;QACT,cAAa;QACb,+BAA8B;QAC9B,6BAA4B,EAC7B;EAGL;IACE,cAAa;IAEb,cAAa,EAQd;IAPC;MACE,gBAAe;MACf,YAAW,EACZ;IACD;MACE,iBAAgB,EACjB;;AC1CL;;;;GAIG;ACbH;EACE,mBAAkB;EAClB,aAAY;EACZ,cAAa;EACb,mBAAkB;EAClB,iBAAgB,EAiBjB;EAtBD;IAOI,YAAW;IACX,aAAY,EACb;EATH;IAYI,mBAAkB;IAClB,QAAO;IACP,SAAQ;IACR,UAAS;IACT,YAAW;IACX,eAAc;IACd,YAAW;IACX,aAAY;IACZ,kBAAiB,EAClB;;AAGH;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe;EACf,0BAA8B;MAA9B,uBAA8B;UAA9B,+BAA8B,EAc/B;EAZC;IACE,+BAAsB;YAAtB,uBAAsB;IACtB,WAAU;IACV,WAAU;IACV,cAAa;IACb,mBAAkB,EAMnB;IAXD;MAQI,eAAc;MACd,YAAW,EACZ","file":"styles.css","sourcesContent":[".page {\n  max-width: 600px;\n  margin: 0 auto;\n}",".in-tabs {\n  padding: 40px 0;\n  font-family: \"TakaoPGothic\";\n  .events & {\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n  }\n  &__headers {\n    // .in-tabs__headers\n    display: flex;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  &__header {\n    // .in-tabs__header\n    flex-basis: 48%;\n    box-sizing: border-box;\n    background: red;\n    color: white;\n    opacity: 0.7;\n    display: inline-block;\n    padding: 10px 15px;\n    cursor: pointer;\n    .events & {\n      // .events .in-tabs__header\n      background: green;\n    }\n    &--current {\n      // .in-tabs__header--current\n      opacity: 1;\n      position: relative;\n      &.active {\n        // .in-tabs__header--current.active\n        display: block;\n      }\n      .events & {\n        color: blue;\n      }\n      &::after {\n        content: '';\n        position: absolute;\n        left: 48%;\n        bottom: -29px;\n        border: 15px solid transparent;\n        border-top: 15px solid green;\n      }\n    }\n  }\n  &__content {\n    display: none;\n    //background: #ededed;\n    padding: 15px;\n    .events & {\n      font-size: 18px;\n      color: blue;\n    }\n    &--current {\n      display: inherit;\n    }\n  }\n}\n","$icons: (\n\t  sprite: (width: 42px, height: 294px, svgPath: '../css/img/sprite.svg'),\n \tem: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: 0px),\n \tfb: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -42px),\n \tin: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -84px),\n \tms: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -126px),\n \tstar-empty: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -168px),\n \tstar-fill: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -210px),\n \tyt: (width: 32px, height: 32px, backgroundX: 0px, backgroundY: -252px),\n);\n\n////\n/// @author Mike Street\n/// @group Sprite\n////\n\n/**\n * The following variable and function originate from the sass-mq library.\n * If you have already included it, you can eliminate the below\n * https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\n */\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n\n/// Set the `$sprite` map\n/// @group sprite\n$sprite: map-get($icons, sprite) !default;\n\n/// Retrive an attributes value for a specific icon in the sprite map\n/// @param {string} $icon - The name of the icon\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\n@function sprite-attr($icon, $attr) {\n\t$newIcon: map-get($icons, $icon);\n\t@if $newIcon == null {\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\n\t}\n\t@return map-get($newIcon, $attr);\n}\n\n/// Create a map with the specified icon of attributes\n/// @param {string} $icon - The name of the icon\n@function icon-attr($icon) {\n\t$attr: (\n\t\twidth: sprite-attr($icon, width),\n\t\theight: sprite-attr($icon, height),\n\t\tx: sprite-attr($icon, backgroundX),\n\t\ty: sprite-attr($icon, backgroundY)\n\t);\n\n\t@return $attr;\n}\n\n/// Get the width of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_width($icon) {\n\t@return mq-px2em(sprite-attr($icon, width));\n}\n\n/// Get the height of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_height($icon) {\n\t@return mq-px2em(sprite-attr($icon, height));\n}\n\n/// Assign the correct SVG background image and dimensions to the element\n%sprite {\n\tdisplay: inline-block;\n\tbackground-image: url(map-get($sprite, svgPath));\n\tbackground-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));\n}\n\n\n/// Add an SVG sprite icon using em positioning\n/// @param {string} $icon - The name of the icon\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\n/// - `all` ensures the icon has the background, position and size.\n/// - `size` is just for dimensions\n/// - `bg` just  applies the backgrounds to an element\n/// @example scss - Usage\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }\n///\n/// @example css - Output\n/// .class {\n/// \tdisplay: inline-block;\n/// \tbackground-image: url(\"../css/img/sprite.svg\");\n/// \tbackground-size: 34.25em 32.1875em;\n/// }\n///\n///\n/// .class {\n/// \twidth: 1.3125em;\n/// \theight: 1.3125em;\n/// \tbackground-position: -0.3125em -0.3125em;\n/// }\n/// .class:hover {\n/// \tbackground-position: -2.25em -2.25em;\n/// }\n@mixin sprite($icon, $type: all) {\n\t@if $type == all {\n\t\t// Shares the backgrounds\n\t\t@extend %sprite;\n\t}\n\n\t$iconMap: icon-attr($icon);\n\n\t// Outputs dimensions in em\n\t@if $type == all or $type == size {\n\t\twidth: mq-px2em(map-get($iconMap, width) + 1);\n\t\theight: mq-px2em(map-get($iconMap, height) + 1);\n\t}\n\n\t// Outputs background position in em\n\t@if $type == all or $type == bg {\n\t\tbackground-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);\n\t}\n}\n\n","@import \"layout\";\n@import \"tabs\";\n@import \"sprite\";\n@import \"social\";\n\n\n\n.round-image {\n  position: relative;\n  width: 300px;\n  height: 300px;\n  border-radius: 50%;\n  overflow: hidden;\n  img {\n    width: 100%;\n    height: auto;\n  }\n\n  &::after {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    content: '';\n    display: block;\n    width: 100%;\n    height: 50px;\n    background: white;\n  }\n}\n\n.s-static-images {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n  &__item {\n    box-sizing: border-box;\n    width: 48%;\n    margin: 1%;\n    padding: 10px;\n    background: orange;\n\n    img {\n      display: block;\n      width: 100%;\n    }\n  }\n}"]}